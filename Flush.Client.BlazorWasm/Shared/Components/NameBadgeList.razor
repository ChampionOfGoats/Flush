@inherits ComponentBase
@inject SessionClient SessionClient

<div>
    @foreach (var nameBadge in NameBadges)
    {
        <NameBadge Data="@nameBadge" />
    }
</div>

@code
{
    private IList<NameBadgeData> NameBadges =
        new List<NameBadgeData>();

    protected override async Task OnInitializedAsync()
    {
        SessionClient.PlayerConnected += OnPlayerConnected;
        SessionClient.PlayerDisconnected += OnPlayerDisconnected;
        SessionClient.PlayerRemoved += OnPlayerRemoved;
        SessionClient.RoleChanged += OnRoleChanged;
        await base.OnInitializedAsync();
    }

    private void OnPlayerConnected(object sender, PlayerConnectedResponse eventArgs)
    {
        var exists = NameBadges.SingleOrDefault(nb => nb.Pid == eventArgs.PlayerId) is not null;
        if (exists)
        {
            var nameBadge = NameBadges.Single(nb => nb.Pid == eventArgs.PlayerId);
            // TODO: Update on reconnect
        }
        else
        {
            NameBadges.Add(new NameBadgeData
            {
                Pid = eventArgs.PlayerId,
                Aid = "1",
                Name = eventArgs.Name,
                Vote = "1",
                IsModerator = false
            });
        }
    }

    private void OnPlayerDisconnected(object sender, PlayerDisconnectedResponse eventArgs)
    {
        // TODO: OnPlayerDisconnected
    }

    private void OnPlayerRemoved(object sender, PlayerRemovedResponse eventArgs)
    {
        var nameBadge = NameBadges.SingleOrDefault(nb => nb.Pid == eventArgs.PlayerId);
        if (nameBadge is not null)
        {
            NameBadges.Remove(nameBadge);
        }
    }

    private void OnRoleChanged(object sender, RoleChangedResponse eventArgs)
    {
        var nameBadge = NameBadges.SingleOrDefault(nb => nb.Pid == eventArgs.PlayerId);
        if (nameBadge is not null)
        {
            nameBadge.IsModerator = eventArgs.IsModerator;
        }
    }
}
